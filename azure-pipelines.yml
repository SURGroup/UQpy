# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python


variables:
  pythonVersion: 3.9
  srcDirectory: src
  
trigger:
  - master
  - Development
  - feature/*
  - bugfix/*
  - hotfix/*

pr:
  branches:
    include:
    - master
    - Development

jobs:
- job: "Build_UQpy_and_run_tests"
  pool:
    vmImage: "macOS-latest"

  steps:
    - task: UsePythonVersion@0
      displayName: "Use Python $(pythonVersion)"
      inputs:
        versionSpec: "$(pythonVersion)"

    - task: gitversion/setup@0
      displayName: Setup GitVersion
      inputs:
        versionSpec: '5.x'

    - task: gitversion/execute@0
      displayName: Calculate GitVersion
      inputs:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'

    - powershell: |
        echo "Current version: $(GitVersion.SemVer)"
      displayName: Shows currently compiling version

    - task: SonarCloudPrepare@1
      condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/pull/target/master'))
      inputs:
        SonarCloud: 'SonarCloud.UQpy'
        organization: 'jhusurg'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'SURGroup_UQpy'
        cliProjectName: 'UQpy'
        cliSources: '.'
        extraProperties: |
          sonar.exclusions=**/example/**, **/tests/**, **/docs/**
          sonar.python.coverage.reportPaths=./coverage.xml

    - script: |
        pip install -r requirements.txt
      displayName: Install project dependencies

    - script: |
        pip install pylint
        pylint --ignored-modules=numpy,scipy,matplotlib,sklearn --disable=E0202,E1136,E1120,E0401,E0213 --disable=R,C,W  src/UQpy
      displayName: "Running Pylint"

    - script: |
        pip install pytest pytest-cov
        PYTHONPATH=src pytest --cov=src tests/ --junitxml=junit/test-results.xml --cov-report=xml --cov-report=html
  #      PYTHONPATH=src pytest tests/unit_test/*.py --cov=src tests/ --junitxml=junit/test-results.xml --cov-report=xml --cov-report=html
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Test with pytest'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
        additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/ **'

    - task: SonarCloudAnalyze@1
      condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/pull/target/master'))

    - task: SonarCloudPublish@1
      condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/pull/target/master'))
      inputs:
        pollingTimeoutSec: '300'

    - script: |
        python setup.py $(GitVersion.SemVer) sdist bdist_wheel
      displayName: Artifact creation
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

    - task: CopyFiles@2
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        SourceFolder: 'dist'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'dist'
        publishLocation: 'Container'

    - script: |
        twine upload --repository-url https://upload.pypi.org/legacy/ dist/* --username "$(TESTPYPIU)" --password "$(TESTPYPIP)"
      displayName: Upload to PyPi
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

    - task: GitHubRelease@1
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        gitHubConnection: 'GitHub_OAuth'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: 'v$(GitVersion.SemVer)'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'

- job: "Create_Docker_images"
  dependsOn: Build_UQpy_and_run_tests
  pool:
     vmImage: "ubuntu-latest"
  steps:
    - task: gitversion/setup@0
      displayName: Setup GitVersion
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        versionSpec: '5.x'

    - task: gitversion/execute@0
      displayName: Calculate GitVersion
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'

    - task: Docker@2
      displayName: Login to Dockerhub
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        containerRegistry: 'docker_registry_surg'
        command: 'login'

    - powershell: |
          echo "Current version: $(GitVersion.SemVer)"
      displayName: Shows currently compiling version
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

    - task: Docker@2
      displayName: Build and push packages to Dockerhub
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        containerRegistry: 'docker_registry_surg'
        command: 'buildAndPush'
        repository: 'surgroup/uqpy'
        Dockerfile: 'Dockerfile'
        tags: '$(GitVersion.SemVer)'

    - task: Docker@2
      displayName: Logout from Dockerhub
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        containerRegistry: 'docker_registry_surg'
        command: 'logout'
