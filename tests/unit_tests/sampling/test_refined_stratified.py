import pytest
from beartype.roar import BeartypeCallHintParamViolation

from UQpy import GaussianProcessRegression, LinearRegression
from UQpy.utilities.kernels.euclidean_kernels.RBF import RBF
from UQpy.run_model.model_execution.PythonModel import PythonModel
from UQpy.utilities.MinimizeOptimizer import MinimizeOptimizer
from UQpy.sampling.stratified_sampling.refinement.GradientEnhancedRefinement import GradientEnhancedRefinement
from UQpy.distributions.collection.Uniform import Uniform
from UQpy.sampling.stratified_sampling.RefinedStratifiedSampling import *
from UQpy.sampling.stratified_sampling.refinement.RandomRefinement import *
from UQpy.sampling.stratified_sampling.strata.VoronoiStrata import *
from UQpy.run_model.RunModel import *


def test_rss_simple_rectangular():
    marginals = [Uniform(loc=0., scale=1.), Uniform(loc=0., scale=1.)]
    strata = RectangularStrata(strata_number=[4, 4])
    x = TrueStratifiedSampling(distributions=marginals, strata_object=strata,
                               nsamples_per_stratum=1, random_state=1)
    algorithm = RandomRefinement(strata)
    y = RefinedStratifiedSampling(stratified_sampling=x,
                                  nsamples=18,
                                  samples_per_iteration=2,
                                  refinement_algorithm=algorithm,
                                  random_state=2)
    assert y.samples[16, 0] == 0.22677821757428504
    assert y.samples[16, 1] == 0.2729789855337742
    assert y.samples[17, 0] == 0.07501256574570675
    assert y.samples[17, 1] == 0.9321401317029486


def test_rss_simple_voronoi():
    marginals = [Uniform(loc=0., scale=1.), Uniform(loc=0., scale=1.)]
    strata = VoronoiStrata(seeds_number=16, dimension=2, random_state=1)
    x = TrueStratifiedSampling(distributions=marginals, strata_object=strata,
                               nsamples_per_stratum=1, random_state=1)
    algorithm = RandomRefinement(strata)
    y = RefinedStratifiedSampling(stratified_sampling=x,
                                  nsamples=18,
                                  samples_per_iteration=2,
                                  refinement_algorithm=algorithm,
                                  random_state=2)
    assert np.round(y.samples[16, 0], 6) == 0.324738
    assert np.round(y.samples[16, 1], 6) == 0.488029
    assert np.round(y.samples[17, 0], 6) == 0.349367
    assert np.round(y.samples[17, 1], 6) == 0.132426


def test_rect_rss():
    """
    Test the 6 samples generated by RSS using rectangular stratification
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = RectangularStrata(strata_number=[2, 2], random_state=1)
    x = TrueStratifiedSampling(distributions=marginals, strata_object=strata, nsamples_per_stratum=1, )
    y = RefinedStratifiedSampling(stratified_sampling=x, nsamples=6, samples_per_iteration=2, random_state=2,
                                  refinement_algorithm=RandomRefinement(strata=strata))
    assert np.allclose(y.samples, np.array([[0.417022, 0.36016225], [1.00011437, 0.15116629],
                                            [0.14675589, 0.5461693], [1.18626021, 0.67278036],
                                            [1.90711287, 0.04595797], [0.80005026, 0.86428026]]))
    assert np.allclose(np.array(y.samplesU01), np.array([[0.208511, 0.36016225], [0.50005719, 0.15116629],
                                                         [0.07337795, 0.5461693], [0.59313011, 0.67278036],
                                                         [0.95355644, 0.04595797], [0.40002513, 0.86428026]]))


def test_rect_gerss():
    """
    Test the 6 samples generated by GE-RSS using rectangular stratification
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = RectangularStrata(strata_number=[2, 2], random_state=1)
    x = TrueStratifiedSampling(distributions=marginals, strata_object=strata, nsamples_per_stratum=1)
    model = PythonModel(model_script='python_model_function.py', model_object_name="y_func")
    rmodel = RunModel(model=model)

    kernel1 = RBF()
    bounds_1 = [[10 ** (-4), 10 ** 3], [10 ** (-3), 10 ** 2], [10 ** (-3), 10 ** 2]]
    optimizer1 = MinimizeOptimizer(method='L-BFGS-B', bounds=bounds_1)
    gpr = GaussianProcessRegression(kernel=kernel1, hyperparameters=[1, 10 ** (-3), 10 ** (-2)], optimizer=optimizer1,
                                    optimizations_number=100, noise=False, regression_model=LinearRegression(),
                                    random_state=0)
    # gpr.fit(samples=x.samples, values=rmodel.qoi_list)
    refinement = GradientEnhancedRefinement(strata=x.strata_object, runmodel_object=rmodel,
                                            surrogate=gpr, nearest_points_number=4)
    z = RefinedStratifiedSampling(stratified_sampling=x, random_state=2, refinement_algorithm=refinement)
    z.run(nsamples=6)
    assert np.allclose(z.samples, np.array([[0.417022, 0.36016225], [1.00011437, 0.15116629],
                                            [0.14675589, 0.5461693], [1.18626021, 0.67278036],
                                            [1.64924557, 0.90711287],
                                            [0.54595797, 0.30005026]]))


def test_vor_rss():
    """
    Test the 6 samples generated by RSS using voronoi stratification
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata_vor = VoronoiStrata(seeds_number=4, dimension=2, random_state=10)
    x_vor = TrueStratifiedSampling(distributions=marginals, strata_object=strata_vor, nsamples_per_stratum=1, )
    y_vor = RefinedStratifiedSampling(stratified_sampling=x_vor, nsamples=6, samples_per_iteration=2,
                                      refinement_algorithm=RandomRefinement(strata=x_vor.strata_object))
    assert np.allclose(y_vor.samples, np.array([[1.78345908, 0.01640854], [1.46201137, 0.70862104],
                                                [0.4021338, 0.05290083], [0.1062376, 0.88958226],
                                                [0.61246269, 0.47160095], [0.85778034, 0.72123075]]))

    assert np.allclose(y_vor.samplesU01, np.array([[0.89172954, 0.01640854], [0.73100569, 0.70862104],
                                                   [0.2010669, 0.05290083], [0.0531188, 0.88958226],
                                                   [0.30623134, 0.47160095], [0.42889017, 0.72123075]]))


# def test_vor_gerss():
#     """
#     Test the 6 samples generated by GE-RSS using voronoi stratification
#     """
#     marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
#     strata_vor = VoronoiStrata(seeds_number=4, dimension=2, random_state=10)
#     x_vor = TrueStratifiedSampling(distributions=marginals, strata_object=strata_vor, nsamples_per_stratum=1, )
#     model = PythonModel(model_script='python_model_function.py', model_object_name="y_func")
#     rmodel = RunModel(model=model)
#     kernel1 = RBF()
#     bounds_1 = [[10 ** (-4), 10 ** 3], [10 ** (-3), 10 ** 2], [10 ** (-3), 10 ** 2]]
#     optimizer1 = MinimizeOptimizer(method='L-BFGS-B', bounds=bounds_1)
#     gpr = GaussianProcessRegression(kernel=kernel1, hyperparameters=[1, 10 ** (-3), 10 ** (-2)], optimizer=optimizer1,
#                                     optimizations_number=100, noise=False, regression_model=LinearRegression(),
#                                     random_state=0)
#     z_vor = RefinedStratifiedSampling(stratified_sampling=x_vor, nsamples=6, random_state=0,
#                                       refinement_algorithm=GradientEnhancedRefinement(strata=x_vor.strata_object,
#                                                                                       runmodel_object=rmodel,
#                                                                                       surrogate=gpr,
#                                                                                       nearest_points_number=4))
#     assert np.allclose(z_vor.samples, np.array([[1.78345908, 0.01640854], [1.46201137, 0.70862104],
#                                                 [0.4021338, 0.05290083], [0.1062376, 0.88958226],
#                                                 [0.66730342, 0.46988084], [1.5015904 , 0.97050966]]))
#     assert np.allclose(z_vor.samplesU01, np.array([[0.89172954, 0.01640854], [0.73100569, 0.70862104],
#                                                    [0.2010669, 0.05290083], [0.0531188, 0.88958226],
#                                                    [0.33365171, 0.46988084], [0.7507952 , 0.97050966]]))


def test_rss_random_state():
    """
        Check 'random_state' is an integer or RandomState object.
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = RectangularStrata(strata_number=[2, 2])
    x = TrueStratifiedSampling(distributions=marginals, strata_object=strata, nsamples_per_stratum=1, random_state=1)
    with pytest.raises(BeartypeCallHintParamViolation):
        RefinedStratifiedSampling(stratified_sampling=x, samples_number=6, samples_per_iteration=2, random_state='abc',
                                  refinement_algorithm=RandomRefinement(x.strata_object))


def test_rss_runmodel_object():
    """
        Check 'runmodel_object' should be a UQpy.RunModel class object.
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = RectangularStrata(strata_number=[2, 2])
    x = TrueStratifiedSampling(distributions=marginals, strata_object=strata, nsamples_per_stratum=1, random_state=1)
    kernel1 = RBF()
    bounds_1 = [[10 ** (-4), 10 ** 3], [10 ** (-3), 10 ** 2], [10 ** (-3), 10 ** 2]]
    optimizer1 = MinimizeOptimizer(method='L-BFGS-B', bounds=bounds_1)
    gpr = GaussianProcessRegression(kernel=kernel1, hyperparameters=[1, 10 ** (-3), 10 ** (-2)], optimizer=optimizer1,
                                    optimizations_number=100, noise=False, regression_model=LinearRegression(),
                                    random_state=0)
    model = PythonModel(model_script='python_model_function.py', model_object_name="y_func")
    rmodel = RunModel(model=model)
    with pytest.raises(BeartypeCallHintParamViolation):
        refinement = GradientEnhancedRefinement(strata=x.strata_object, runmodel_object='abc',
                                                surrogate=gpr)
        RefinedStratifiedSampling(stratified_sampling=x, samples_number=6, samples_per_iteration=2,
                                  refinement_algorithm=refinement)


def test_rss_kriging_object():
    """
        Check 'kriging_object', it should have 'fit' and 'predict' methods.
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = RectangularStrata(strata_number=[2, 2])
    x = TrueStratifiedSampling(distributions=marginals, strata_object=strata, nsamples_per_stratum=1, random_state=1)
    model = PythonModel(model_script='python_model_function.py', model_object_name="y_func")
    rmodel = RunModel(model=model)
    with pytest.raises(BeartypeCallHintParamViolation):
        refinement = GradientEnhancedRefinement(strata=x.strata_object, runmodel_object=rmodel,
                                                surrogate="abc")


def test_nsamples():
    """
        Check 'nsamples' attributes, it should be an integer.
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = RectangularStrata(strata_number=[2, 2])
    x = TrueStratifiedSampling(distributions=marginals, strata_object=strata, nsamples_per_stratum=1, random_state=1)
    with pytest.raises(BeartypeCallHintParamViolation):
        RefinedStratifiedSampling(stratified_sampling=x, nsamples='a', samples_per_iteration=2,
                                  refinement_algorithm=RandomRefinement(x.strata_object))
