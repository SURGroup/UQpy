from UQpy.SampleMethods import RectangularStrata, RectangularSTS, VoronoiStrata, VoronoiSTS, DelaunayStrata, DelaunaySTS
from UQpy.Distributions import Exponential
import numpy as np
import pytest

# Rectangular
marginals = [Exponential(loc=1., scale=1.), Exponential(loc=1., scale=1.)]
strata = RectangularStrata(nstrata=[3, 3])

nsamples_per_stratum = [1]*9
nsamples_per_stratum[4] = 0
x_sts = RectangularSTS(dist_object=marginals, strata_object=strata, nsamples_per_stratum=nsamples_per_stratum,
                       random_state=1)

x_sts1 = RectangularSTS(dist_object=marginals, strata_object=strata, nsamples_per_stratum=1, sts_criterion="centered",
                        verbose=True)

# Voronoi
strata_vor = VoronoiStrata(nseeds=8, dimension=2, random_state=3)
sts_vor = VoronoiSTS(dist_object=marginals, strata_object=strata_vor)
sts_vor.run(nsamples_per_stratum=1)

sts_vor2 = VoronoiSTS(dist_object=marginals, strata_object=strata_vor)
sts_vor2.run(nsamples=8, nsamples_per_stratum=1)
sts_vor2.run()

# sts_vor1 = VoronoiSTS(dist_object=marginals, strata_object=strata_vor)
# sts_vor1.run(nsamples_per_stratum=nsamples_per_stratum[:8])

# Delaunay
seeds = np.array([[0, 0], [0.4, 0.8], [1, 0], [1, 1]])
strata_del = DelaunayStrata(seeds=seeds, random_state=2)
sts_del = DelaunaySTS(dist_object=marginals, strata_object=strata_del)
sts_del.run(nsamples_per_stratum=2)

# sts_del1 = DelaunaySTS(dist_object=marginals, strata_object=strata_del)
# sts_del1.run(nsamples_per_stratum=[2, 0, 1, 1])


# Unit tests
def test_rect_random():
    """
    Test the samples generated by 3x3 rectangular strata, with random points
    """
    tmp1 = (np.round(x_sts.samples, 3) == np.array([[1.15, 1.275], [1.406, 1.106], [2.257, 1.031], [1.064, 1.595],
                                                    [2.604, 1.719], [1.151, 3.254], [1.513, 4.203],
                                                    [2.126, 3.209]])).all()
    tmp2 = (np.round(x_sts.samplesU01, 3) == np.array([[0.139, 0.24], [0.333, 0.101], [0.716, 0.031], [0.062, 0.449],
                                                       [0.799, 0.513], [0.14, 0.895], [0.401, 0.959],
                                                       [0.676, 0.89]])).all()
    assert tmp1 and tmp2


def test_rect_centered():
    """
    Test the samples generated by 3x3 rectangular strata, with centered points
    """
    tmp1 = (np.round(x_sts1.samples, 3) == np.array([[1.182, 1.182], [1.693, 1.182], [2.792, 1.182], [1.182, 1.693],
                                                    [1.693, 1.693], [2.792, 1.693], [1.182, 2.792], [1.693, 2.792],
                                                    [2.792, 2.792]])).all()
    tmp2 = (np.round(x_sts1.samplesU01, 3) == np.array([[0.167, 0.167], [0.5, 0.167], [0.833, 0.167], [0.167, 0.5],
                                                        [0.5, 0.5], [0.833, 0.5], [0.167, 0.833], [0.5, 0.833],
                                                        [0.833, 0.833]])).all()
    assert tmp1 and tmp2


def test_rect_sts_criterion():
    """
        Test the 'sts_criterion' attribute for RectangularSTS class.
    """
    with pytest.raises(NotImplementedError):
        RectangularSTS(dist_object=marginals, strata_object=strata, nsamples_per_stratum=1, sts_criterion="center")


def test_rect_strata_object():
    """
        Test type of strata_object. It should be a RectangularStrata object.
    """
    with pytest.raises(NotImplementedError):
        RectangularSTS(dist_object=marginals, strata_object=None, nsamples_per_stratum=1, sts_criterion="centered")


def test_rect_nsamples_check1():
    """
        In case of centered sampling, nsamples should be equal to number of strata in strata_object.
    """
    with pytest.raises(ValueError):
        RectangularSTS(dist_object=marginals, strata_object=strata, nsamples_per_stratum=1, sts_criterion="centered",
                       nsamples=10)


def test_vor_nsamples_per_strarum_not_0():
    """
        Test samples and weights of the class object, when all stratum has atleast 1 sample.
    """
    tmp1 = (np.round(sts_vor.samples, 3) == np.array([[1.519, 2.507], [1.2, 2.531], [4.642, 3.16], [1.194, 1.305],
                                                      [1.223, 1.461], [1.003, 1.689], [1.585, 1.077],
                                                      [2.126, 1.665]])).all()
    tmp2 = (np.round(sts_vor.weights, 3) == np.array([0.161, 0.158, 0.097, 0.128, 0.032, 0.054, 0.249, 0.122])).all()
    assert tmp1 and tmp2


# def test_vor_nsamples_per_strarum_0():
#     """
#         Test samples and weights of the class object.
#     """
#     tmp1 = (np.round(sts_vor1.samples, 3) == np.array([[1.749, 2.082], [1.092, 3.002], [3.885, 3.135], [1.158, 1.091],
#                                                        [1.068, 3.252], [1.613, 1.236], [3.104, 1.725]])).all()
#     tmp2 = (np.round(sts_vor1.weights, 3) == np.array([0.161, 0.158, 0.097, 0.128, 0.054, 0.249, 0.122])).all()
#     assert tmp1 and tmp2


def test_vor_strata_object():
    """
        Test type of strata_object. It should be a VoronoiStrata object.
    """
    with pytest.raises(NotImplementedError):
        VoronoiSTS(dist_object=marginals, strata_object=None)


def test_vor_random_state():
    """
        Check 'random_state' is an integer or RandomState object.
    """
    with pytest.raises(TypeError):
        VoronoiSTS(dist_object=marginals, strata_object=strata_vor, random_state='abc')


def test_vor_dist_object():
    """
        Check 'dist_object' is a Distribution object.
    """
    with pytest.raises(TypeError):
        VoronoiSTS(dist_object=[2, 1], strata_object=strata_vor)


def test_vor_dist_object2():
    """
        Check 'dist_object' is a Distribution object.
    """
    with pytest.raises(TypeError):
        VoronoiSTS(dist_object=2, strata_object=strata_vor)


def test_voronoi_nsamples_check():
    """
        In case of centered sampling, nsamples should be equal to number of strata in strata_object.
    """
    with pytest.raises(RuntimeError):
        sts_vor.run(nsamples='abc')


def test_voronoi_nsamples_per_stratum_check():
    """
        Check length of nsamples_per_stratum should be equal to number of strata in strata_object.
    """
    with pytest.raises(ValueError):
        sts_vor.run(nsamples_per_stratum=[2, 1, 0, 1])


def test_voronoi_nsamples_per_stratum_check2():
    """
        Check nsamples_per_stratum should an integer or list.
    """
    with pytest.raises(ValueError):
        sts_vor.run(nsamples_per_stratum='abc')


def test_del_nsamples_per_strarum_not_0():
    """
        Test samples and weights of the class object, when all stratum has atleast 1 sample.
    """
    tmp1 = (np.round(sts_del.samples, 3) == np.array([[1.2, 2.441], [1.089, 1.778], [2.219, 1.154], [1.935, 1.077],
                                                      [1.689, 5.188], [3.11, 5.136], [1.92, 2.719],
                                                      [2.037, 2.707]])).all()
    tmp2 = (np.round(sts_del.weights, 3) == np.array([0.1, 0.1, 0.2, 0.2, 0.05, 0.05, 0.15, 0.15])).all()
    assert tmp1 and tmp2


# def test_del_nsamples_per_strarum_0():
#     """
#         Test samples and weights of the class object.
#     """
#     tmp1 = (np.round(sts_del1.samples, 3) == np.array([[1.2, 2.441], [1.089, 1.778], [2.219, 1.154], [1.935, 1.077],
#                                                       [1.689, 5.188], [3.11, 5.136], [1.92, 2.719],
#                                                       [2.037, 2.707]])).all()
#     tmp2 = (np.round(sts_del1.weights, 3) == np.array([0.1, 0.1, 0.2, 0.2, 0.05, 0.05, 0.15, 0.15])).all()
#     assert tmp1 and tmp2


def test_del_strata_object():
    """
        Test type of strata_object. It should be a DelaunayStrata object.
    """
    with pytest.raises(NotImplementedError):
        DelaunaySTS(dist_object=marginals, strata_object=None)
